{
  "name": "template",
  "description": "ChiÏ‡ Template Engines",
  "version": "0.0.2",
  "repository": {
    "type": "git",
    "url": "https://github.com/nodule/template.git"
  },
  "dependencies": {
    "es6-template-strings": "^2.0.0",
    "front-matter": "^1.0.0",
    "handlebars": "3.x.x",
    "jade": "1.x.x",
    "js-yaml": "3.x.x",
    "marked": "0.x.x",
    "mustache": "1.x.x"
  },
  "nodes": [
    {
      "dependencies": {
        "npm": {
          "front-matter": "latest"
        }
      },
      "ports": {
        "input": {
          "in": {
            "type": "string",
            "title": "Body",
            "format": "markdown",
            "description": "The body of this markdown document",
            "async": true
          }
        },
        "output": {
          "out": {
            "title": "Output",
            "type": "object",
            "items": {
              "attributes": {
                "title": "Attributes",
                "type": "object"
              },
              "body": {
                "title": "Markdown",
                "type": "string"
              }
            }
          }
        }
      },
      "phrases": {
        "active": "Extracting front-matter"
      },
      "description": "Extract YAML front matter",
      "async": true,
      "ns": "template",
      "name": "front-matter",
      "fn": "on.input.in = function() {\n  output( { out: $.write('in', front_matter($.in)) });\n};\n"
    },
    {
      "dependencies": {
        "npm": {
          "handlebars": "latest"
        }
      },
      "ports": {
        "input": {
          "body": {
            "type": "string",
            "format": "html",
            "title": "Template body",
            "description": "The body of the handlebars template",
            "required": true
          },
          "vars": {
            "type": "object",
            "title": "Input variables",
            "description": "the input variables for this template",
            "default": {}
          },
          "handlebars": {
            "type": "function",
            "title": "Handlebars",
            "default": null
          }
        },
        "output": {
          "out": {
            "title": "HTML",
            "type": "string"
          }
        }
      },
      "phrases": {
        "active": "Compiling handlebars template"
      },
      "description": "Handlebars Template engine",
      "ns": "template",
      "name": "handlebars",
      "fn": "var hb = $.handlebars || handlebars;\nvar tpl = hb.compile($.body);\noutput = {out: $.create(tpl($.vars))}\n"
    },
    {
      "dependencies": {
        "npm": {
          "handlebars": "latest"
        }
      },
      "ports": {
        "input": {
          "name": {
            "title": "Helper Name",
            "type": "string"
          },
          "fn": {
            "title": "Helper Function",
            "type": "function",
            "description": "The Helper function"
          }
        },
        "output": {
          "handlebars": {
            "title": "Handlebars",
            "type": "function"
          }
        }
      },
      "phrases": {
        "active": "Adding handlebar helper"
      },
      "description": "Handlebars Helper",
      "ns": "template",
      "name": "handlebarsHelper",
      "fn": "handlebars.registerHelper($.name, $.fn);\noutput.handlebars = $.create(handlebars);\n"
    },
    {
      "dependencies": {
        "npm": {
          "jade": "0.x.x"
        }
      },
      "ports": {
        "input": {
          "body": {
            "type": "string",
            "format": "html",
            "title": "Template body",
            "description": "The body of the Jade template",
            "required": true
          },
          "vars": {
            "type": "object",
            "title": "Input variables",
            "description": "the input variables for this template",
            "required": true,
            "readonly": true
          }
        },
        "output": {
          "out": {
            "title": "HTML",
            "type": "string"
          }
        }
      },
      "phrases": {
        "active": "Compiling jade template"
      },
      "env": "server",
      "description": "Jade Template engine",
      "ns": "template",
      "name": "jade",
      "fn": "output = {out: $.create(jade.render($.body, $.vars))}\n"
    },
    {
      "dependencies": {
        "npm": {
          "marked": "latest"
        }
      },
      "ports": {
        "input": {
          "in": {
            "type": "string",
            "title": "Body",
            "format": "markdown",
            "description": "The body of this markdown document",
            "async": true
          }
        },
        "output": {
          "out": {
            "title": "HTML",
            "type": "string"
          }
        }
      },
      "phrases": {
        "active": "Creating markdown document"
      },
      "description": "Markdown",
      "async": true,
      "ns": "template",
      "name": "markdown",
      "fn": "on.input.in = function() {\n  output( { out: $.write('in', marked($.in)) });\n};\n"
    },
    {
      "dependencies": {
        "npm": {
          "mustache": "latest"
        }
      },
      "ports": {
        "input": {
          "body": {
            "type": "string",
            "format": "html",
            "title": "Template body",
            "description": "The body of the mustache template",
            "required": true
          },
          "vars": {
            "type": "object",
            "title": "Input variables",
            "description": "the input variables for this template",
            "required": true,
            "readonly": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "string"
          }
        }
      },
      "phrases": {
        "active": "Compiling mustache template"
      },
      "description": "Mustache Template engine",
      "ns": "template",
      "name": "mustache",
      "fn": "output = {out: $.create(mustache.render($.body, $.vars))}\n"
    },
    {
      "dependencies": {
        "npm": {
          "es6-template-strings": "latest"
        }
      },
      "ports": {
        "input": {
          "in": {
            "type": "object",
            "title": "Input",
            "description": "Input values",
            "required": true
          },
          "template": {
            "type": "string",
            "title": "String",
            "description": "Template string",
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "String",
            "type": "object"
          }
        }
      },
      "phrases": {
        "active": "Applying template string"
      },
      "description": "Compile and resolve template strings notation as specified in ES6",
      "ns": "template",
      "name": "string",
      "fn": "output.out = $.write('in', es6_template_strings($.template, $.in))\n"
    },
    {
      "dependencies": {
        "npm": {
          "js-yaml": "3.x.x"
        }
      },
      "ports": {
        "input": {
          "in": {
            "type": "string",
            "format": "yaml",
            "title": "YAML",
            "description": "The YAML string",
            "required": true
          }
        },
        "output": {
          "out": {
            "title": "Vars",
            "type": "object"
          }
        }
      },
      "phrases": {
        "active": "Parsing YAML"
      },
      "description": "YAML Parser",
      "ns": "template",
      "name": "yaml",
      "fn": "output = {out: $.write('in', js_yaml.safeLoad($.in, { strict: true }))}\n"
    },
    {
      "type": "flow",
      "nodes": [
        {
          "id": "Handlebars",
          "title": "Handlebars",
          "ns": "template",
          "name": "handlebars"
        },
        {
          "id": "ReadFile",
          "title": "ReadFile",
          "ns": "fs",
          "name": "readFile"
        }
      ],
      "links": [
        {
          "source": {
            "id": "ReadFile",
            "port": "out"
          },
          "target": {
            "id": "Handlebars",
            "port": "body"
          },
          "metadata": {
            "title": "ReadFile out -> body Handlebars"
          }
        }
      ],
      "title": "Read handlebars file",
      "description": "Reads a handlebar file",
      "ports": {
        "input": {
          "file": {
            "nodeId": "ReadFile",
            "title": "File",
            "name": "file"
          },
          "vars": {
            "nodeId": "Handlebars",
            "title": "Vars",
            "name": "vars"
          }
        },
        "output": {
          "out": {
            "nodeId": "Handlebars",
            "title": "Out",
            "name": "out"
          }
        }
      },
      "providers": {
        "@": {
          "url": "https://serve-chix.rhcloud.com/nodes/{ns}/{name}"
        }
      },
      "ns": "template",
      "name": "readHandleBarsFile"
    },
    {
      "type": "flow",
      "nodes": [
        {
          "id": "Markdown",
          "title": "Markdown",
          "ns": "template",
          "name": "markdown"
        },
        {
          "id": "ReadFile",
          "title": "ReadFile",
          "ns": "fs",
          "name": "readFile"
        }
      ],
      "links": [
        {
          "source": {
            "id": "ReadFile",
            "port": "out"
          },
          "target": {
            "id": "Markdown",
            "port": "in"
          },
          "metadata": {
            "title": "ReadFile out -> in Markdown"
          }
        }
      ],
      "title": "Read markdown file",
      "description": "Reads a markdown file",
      "ports": {
        "input": {
          "file": {
            "nodeId": "ReadFile",
            "title": "File",
            "name": "file"
          }
        },
        "output": {
          "out": {
            "nodeId": "Markdown",
            "title": "Out",
            "name": "out"
          }
        }
      },
      "providers": {
        "@": {
          "url": "https://serve-chix.rhcloud.com/nodes/{ns}/{name}"
        }
      },
      "ns": "template",
      "name": "readMarkdownFile"
    },
    {
      "type": "flow",
      "nodes": [
        {
          "id": "Mustache",
          "title": "Mustache",
          "ns": "template",
          "name": "mustache"
        },
        {
          "id": "ReadFile",
          "title": "ReadFile",
          "ns": "fs",
          "name": "readFile"
        }
      ],
      "links": [
        {
          "source": {
            "id": "ReadFile",
            "port": "out"
          },
          "target": {
            "id": "Mustache",
            "port": "body"
          },
          "metadata": {
            "title": "ReadFile out -> body Mustache"
          }
        }
      ],
      "title": "Read mustache file",
      "description": "Reads mustache file",
      "ports": {
        "input": {
          "file": {
            "nodeId": "ReadFile",
            "title": "File",
            "name": "file"
          },
          "vars": {
            "nodeId": "Mustache",
            "title": "Vars",
            "name": "vars"
          }
        },
        "output": {
          "out": {
            "nodeId": "Handlebars",
            "title": "Out",
            "name": "out"
          }
        }
      },
      "providers": {
        "@": {
          "url": "https://serve-chix.rhcloud.com/nodes/{ns}/{name}"
        }
      },
      "ns": "template",
      "name": "readMustacheFile"
    },
    {
      "type": "flow",
      "nodes": [
        {
          "id": "TemplateString",
          "title": "TemplateString",
          "ns": "template",
          "name": "string"
        },
        {
          "id": "ReadFile",
          "title": "ReadFile",
          "ns": "fs",
          "name": "readFile"
        }
      ],
      "links": [
        {
          "source": {
            "id": "ReadFile",
            "port": "out"
          },
          "target": {
            "id": "TemplateString",
            "port": "in"
          },
          "metadata": {
            "title": "ReadFile out -> in TemplateString"
          }
        }
      ],
      "title": "Read template string file",
      "description": "Reads an es6 template string file",
      "ports": {
        "input": {
          "file": {
            "nodeId": "ReadFile",
            "title": "File",
            "name": "file"
          },
          "vars": {
            "nodeId": "TemplateString",
            "title": "Vars",
            "name": "in"
          }
        },
        "output": {
          "out": {
            "nodeId": "TemplateString",
            "title": "Out",
            "name": "out"
          }
        }
      },
      "providers": {
        "@": {
          "url": "https://serve-chix.rhcloud.com/nodes/{ns}/{name}"
        }
      },
      "ns": "template",
      "name": "readTemplateString"
    },
    {
      "type": "flow",
      "nodes": [
        {
          "id": "YAML",
          "title": "YAML",
          "ns": "template",
          "name": "yaml"
        },
        {
          "id": "ReadFile",
          "title": "ReadFile",
          "ns": "fs",
          "name": "readFile"
        }
      ],
      "links": [
        {
          "source": {
            "id": "ReadFile",
            "port": "out"
          },
          "target": {
            "id": "YAML",
            "port": "in"
          },
          "metadata": {
            "title": "ReadFile out -> in YAML"
          }
        }
      ],
      "title": "Read yaml file",
      "description": "Reads a yaml file",
      "ports": {
        "input": {
          "file": {
            "nodeId": "ReadFile",
            "title": "File",
            "name": "file"
          }
        },
        "output": {
          "out": {
            "nodeId": "YAML",
            "title": "Out",
            "name": "out"
          }
        }
      },
      "providers": {
        "@": {
          "url": "https://serve-chix.rhcloud.com/nodes/{ns}/{name}"
        }
      },
      "ns": "template",
      "name": "readYamlFile"
    }
  ]
}